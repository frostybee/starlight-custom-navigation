---
import { config } from 'virtual:custom-navigation-options';

const { pagination } = Astro.locals.starlightRoute;
const { prev, next } = pagination;

//TODO: refactor the destructuring to use the config object directly.
//TODO: Use Zod library to validate the config object.
// Get configuration from virtual module
const linkLabels = config.linkLabels ?? { show: true, showOnHover: true, buttonRadiusWhenNoLabel: 24 };
const showLabels = linkLabels.show;
const showLabelsOnHover = linkLabels.showOnHover;
let buttonRadius = linkLabels.buttonRadiusNoLabel ?? "24"; 
buttonRadius = buttonRadius + "px";
const navShortcuts = config.navShortcuts ?? {
  previous: { key: 'ArrowLeft', modifier: 'ctrl' },
  next: { key: 'ArrowRight', modifier: 'ctrl' }
};
const svgIcon = config.svgIcon ?? {
  path: 'M4 16L12 8L20 16',
  strokeWidth: 2
};


// Format shortcut for display
const formatShortcut = (shortcut: { key: string, modifier: string }) => {
  if (!shortcut) return '';
  const modifier = shortcut.modifier.charAt(0).toUpperCase() + shortcut.modifier.slice(1);
  const key = shortcut.key.replace('Arrow', '');
  
  // Replace ArrowRight/ArrowLeft with arrow symbols
  const displayKey = key === 'Right' ? '→' : key === 'Left' ? '←' : key;
  
  return `${modifier} + ${displayKey}`;
};

// Get the button icon
const getButtonIcon = () => {  
  return `<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="${svgIcon.strokeWidth}" stroke-linecap="round" stroke-linejoin="round">
            <path d="${svgIcon.path}"></path>
          </svg>`;
};

---

<div class="navigation-controls">
    {prev && (
      <a href={prev.href} rel="prev" class="nav-button prev-button" id="prev-page-link">
        <div class="nav-button-icon">
          <Fragment set:html={getButtonIcon()} />
        </div>
        {showLabels && (
          <div class="nav-button-text">
            <div class="arrow-direction">{Astro.locals.t('page.previousLink')}</div>
            <div class="nav-label">{prev.label || 'Previous Page'}</div>
          </div>
        )}
        <div class="shortcut-tooltip">
          {!showLabels && showLabelsOnHover && <div class="tooltip-label">{prev.label || 'Previous Page'}</div>}
          <div class="tooltip-shortcut">{formatShortcut(navShortcuts.previous)}</div>
        </div>
      </a>
    )}

    {next && (
      <a href={next.href} class="nav-button next-button" id="next-page-link">
        {showLabels && (
          <div class="nav-button-text">
            <div class="arrow-direction">{Astro.locals.t('page.nextLink')}</div>
            <div class="nav-label">{next.label || 'Next Page'}</div>
          </div>
        )}
        <div class="nav-button-icon">
          <Fragment set:html={getButtonIcon()} />
        </div>
        <div class="shortcut-tooltip">
          {!showLabels && showLabelsOnHover && <div class="tooltip-label">{next.label || 'Next Page'}</div>}
          <div class="tooltip-shortcut">{formatShortcut(navShortcuts.next)}</div>
        </div>
      </a>
    )}
  </div>
   
<script define:vars={{ navShortcuts }}>
  // Add keyboard navigation
  document.addEventListener('keydown', (event) => {
    // Get the key that was pressed
    const key = event.key.toLowerCase();
    
    // Check if the pressed key matches our configured shortcuts
    const checkShortcut = (shortcut) => {
      if (!shortcut) return false;
      const modifierKey = `${shortcut.modifier}Key`;
      return key === shortcut.key.toLowerCase() && event[modifierKey];
    };

    if (checkShortcut(navShortcuts.previous)) {
      const prevLink = document.getElementById('prev-page-link');
      if (prevLink) prevLink.click();
    } else if (checkShortcut(navShortcuts.next)) {
      const nextLink = document.getElementById('next-page-link');
      if (nextLink) nextLink.click();
    }
  });

  // Add touch swipe support
  let touchStartX = 0;
  let touchEndX = 0;
  const minSwipeDistance = 50; // Minimum distance required for a swipe

  document.addEventListener('touchstart', (e) => {
    touchStartX = e.changedTouches[0].screenX;
  }, { passive: true });

  document.addEventListener('touchend', (e) => {
    touchEndX = e.changedTouches[0].screenX;
    handleSwipe();
  }, { passive: true });

  function handleSwipe() {
    const swipeDistance = touchEndX - touchStartX;
    
    // Only trigger if swipe distance is greater than minimum
    if (Math.abs(swipeDistance) < minSwipeDistance) return;

    if (swipeDistance > 0) {
      // Swipe right - go to previous page
      const prevLink = document.getElementById('prev-page-link');
      if (prevLink) prevLink.click();
    } else {
      // Swipe left - go to next page
      const nextLink = document.getElementById('next-page-link');
      if (nextLink) nextLink.click();
    }
  }

  // Show/hide navigation on scroll
  let lastScrollY = window.scrollY;
  let ticking = false;

  const navControls = document.querySelector('.navigation-controls');

  window.addEventListener('scroll', () => {
    lastScrollY = window.scrollY;

    if (!ticking) {
      window.requestAnimationFrame(() => {
        // Hide arrows when scrolling down, show when scrolling up
        if (lastScrollY > 100) {
          navControls?.classList.add('nav-hidden');
        } else {
          navControls?.classList.remove('nav-hidden');
        }
        ticking = false;
      });

      ticking = true;
  }
  });
</script>

<style define:vars={{ buttonRadius }}>
  @layer starlight-custom-navigation {
    .navigation-controls {
      position: relative;
      width: 100%;
      height: 0;
      overflow: hidden;
    }

    /* Base button styling shared by both buttons */
    .nav-button {
      position: fixed;
      top: 50%;
      display: flex;
      align-items: center;
      text-decoration: none;
      color: var(--sl-color-text);
      background-color: var(--sl-color-bg-sidebar);
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.15);
      padding: 1rem 1.25rem;
      max-width: 300px;
      border-radius: 5px;
      z-index: 999;
      pointer-events: auto;
      transform: translateY(-50%);
      transition: background-color 0.3s ease, color 0.3s ease, opacity 0.3s ease, transform 0.3s ease, padding 0.3s ease;
      opacity: 1;
    }

    /* Compact button style when labels are hidden */
    .nav-button:not(:has(.nav-button-text)) {
      padding: 0.75rem;
      border-radius: var(--buttonRadius);
      /* width: calc(var(--buttonRadius) * 1.2); */
      /* height: calc(var(--buttonRadius) * 1.2); */
      justify-content: center;
    }

    .nav-button:hover {
      background-color: var(--sl-color-accent);
      color: white;
      opacity: 1;
    }

    /* Hidden state for buttons */
    .nav-hidden {
      opacity: 0;
      pointer-events: none; 
    }

    .nav-hidden:hover {
      opacity: 0.7;
    }

    /* Previous button specific styling */
    .prev-button {
      left: 1;
      right: auto;
      border-radius: 0 5px 5px 0;
      padding-left: 0.75rem;
      margin-left: 0.5rem;
      /* Add initial offset to base transform */
      transform: translateY(-50%) translateX(-5px);
    }

    .prev-button:hover {
      /* Preserve vertical centering */
      transform: translateY(-50%) translateX(0); 
    }

    .prev-button .nav-button-icon {
      margin-left: 0.5rem;
    }

    /* Next button specific styling */
    .next-button {
      right: 0;
      left: auto;
      border-radius: 5px 0 0 5px;
      flex-direction: row-reverse;
      margin-right: 1rem;
      padding: 1rem 0.5rem 1rem 1.25rem;
      /* Add initial offset to base transform */
      transform: translateY(-50%) translateX(5px);
    }

    .next-button:hover {
      transform: translateY(-50%) translateX(0); /* Preserve vertical centering */
    }

    .next-button .nav-button-icon {
      margin-right: 0.5rem;
      transform: rotate(180deg);
    }

    /* Icon styling */
    .nav-button-icon {
      display: flex;
      padding: 0 0.75rem;
      align-items: center;
    }

    /* Compact icon style when labels are hidden */
    .nav-button:not(:has(.nav-button-text)) .nav-button-icon {
      padding: 0;
    }

    /* Text container */
    .nav-button-text {
      display: flex;
      flex-direction: column;
    }

    .arrow-direction {
      font-size: 0.8rem;
      text-transform: uppercase;
      letter-spacing: 0.05em;
      opacity: 0.7;
      margin-bottom: 0.25rem;
    }

    .nav-label {
      font-weight: 600;
      line-height: 1.3;
      max-width: 200px;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }

    /* Shortcut tooltip styling */
    .shortcut-tooltip {
      position: absolute;
      bottom: -35px;
      left: 50%;
      transform: translateX(-50%);
      background-color: var(--sl-color-gray-6);      
      color: var(--sl-color-text);      
      padding: 4px 8px;
      border-radius: 4px;
      font-size: 0.75rem;
      opacity: 0;
      transition: opacity 0.2s ease;
      pointer-events: none;
      white-space: nowrap;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 2px;
    }
    
    /* Show the link label below the nav buttons when labels are hidden */
    .nav-button:not(:has(.nav-button-text)) .shortcut-tooltip  {
      bottom: -60px;
    }

    .nav-button:hover .shortcut-tooltip {
      opacity: 1;
    }

    .tooltip-label {
      font-weight: 500;
      color: var(--sl-color-white);
    }

    .tooltip-shortcut {
      opacity: 0.8;
      font-size: 0.7rem;
    }

    /* For mobile responsiveness */
    @media (max-width: 768px) {
      .nav-button {
        top: 70vh !important;
        bottom: 30vh !important;
        transform: none !important;
        width: 46px;
        height: 46px;
        border-radius: 50%;
        justify-content: center;
        align-items: center;
        padding: 0 !important;
      }

      .nav-button-text {
        display: none; /* Only show icons on mobile */
      }
      .prev-button, .next-button {
        transform: translateX(0);
      }
      .nav-button-icon {
        padding: 0;
      }

      .shortcut-tooltip {
        display: none; /* Hide tooltips on mobile */
      }
    }

    /* Hide buttons when printing */
    @media print {
      .nav-button {
        display: none !important;
      }
    }
  }
</style>
